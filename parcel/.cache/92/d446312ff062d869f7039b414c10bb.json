{"id":"index.html","dependencies":[{"name":"./app.js","dynamic":true,"resolved":"C:\\Users\\james\\Desktop\\threepractice\\madcamp_week4\\parcel\\app.js","parent":"C:\\Users\\james\\Desktop\\threepractice\\madcamp_week4\\parcel\\index.html"},{"name":"_css_loader","parent":"C:\\Users\\james\\Desktop\\threepractice\\madcamp_week4\\parcel\\index.html","resolved":"C:\\Users\\james\\AppData\\Roaming\\npm\\node_modules\\parcel-bundler\\src\\builtins\\css-loader.js"},{"name":"C:\\Users\\james\\package.json","includedInParent":true,"mtime":1658502313004}],"generated":{"html":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <title>three.js webgl - percent closer soft-shadows</title>\r\n    <meta charset=\"utf-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0\">\r\n    <style>body {\r\n        color: #000;\r\n      }\r\n      a {\r\n        color: #08f;\r\n      }</style>\r\n  </head>\r\n\r\n  <body>\r\n    <script type=\"x-shader/x-fragment\" id=\"PCSS\">\r\n\r\n      #define LIGHT_WORLD_SIZE 0.005\r\n      #define LIGHT_FRUSTUM_WIDTH 3.75\r\n      #define LIGHT_SIZE_UV (LIGHT_WORLD_SIZE / LIGHT_FRUSTUM_WIDTH)\r\n      #define NEAR_PLANE 9.5\r\n\r\n      #define NUM_SAMPLES 17\r\n      #define NUM_RINGS 11\r\n      #define BLOCKER_SEARCH_NUM_SAMPLES NUM_SAMPLES\r\n\r\n      vec2 poissonDisk[NUM_SAMPLES];\r\n\r\n      void initPoissonSamples( const in vec2 randomSeed ) {\r\n      \tfloat ANGLE_STEP = PI2 * float( NUM_RINGS ) / float( NUM_SAMPLES );\r\n      \tfloat INV_NUM_SAMPLES = 1.0 / float( NUM_SAMPLES );\r\n\r\n      \t// jsfiddle that shows sample pattern: https://jsfiddle.net/a16ff1p7/\r\n      \tfloat angle = rand( randomSeed ) * PI2;\r\n      \tfloat radius = INV_NUM_SAMPLES;\r\n      \tfloat radiusStep = radius;\r\n\r\n      \tfor( int i = 0; i < NUM_SAMPLES; i ++ ) {\r\n      \t\tpoissonDisk[i] = vec2( cos( angle ), sin( angle ) ) * pow( radius, 0.75 );\r\n      \t\tradius += radiusStep;\r\n      \t\tangle += ANGLE_STEP;\r\n      \t}\r\n      }\r\n\r\n      float penumbraSize( const in float zReceiver, const in float zBlocker ) { // Parallel plane estimation\r\n      \treturn (zReceiver - zBlocker) / zBlocker;\r\n      }\r\n\r\n      float findBlocker( sampler2D shadowMap, const in vec2 uv, const in float zReceiver ) {\r\n      \t// This uses similar triangles to compute what\r\n      \t// area of the shadow map we should search\r\n      \tfloat searchRadius = LIGHT_SIZE_UV * ( zReceiver - NEAR_PLANE ) / zReceiver;\r\n      \tfloat blockerDepthSum = 0.0;\r\n      \tint numBlockers = 0;\r\n\r\n      \tfor( int i = 0; i < BLOCKER_SEARCH_NUM_SAMPLES; i++ ) {\r\n      \t\tfloat shadowMapDepth = unpackRGBAToDepth(texture2D(shadowMap, uv + poissonDisk[i] * searchRadius));\r\n      \t\tif ( shadowMapDepth < zReceiver ) {\r\n      \t\t\tblockerDepthSum += shadowMapDepth;\r\n      \t\t\tnumBlockers ++;\r\n      \t\t}\r\n      \t}\r\n\r\n      \tif( numBlockers == 0 ) return -1.0;\r\n\r\n      \treturn blockerDepthSum / float( numBlockers );\r\n      }\r\n\r\n      float PCF_Filter(sampler2D shadowMap, vec2 uv, float zReceiver, float filterRadius ) {\r\n      \tfloat sum = 0.0;\r\n      \tfloat depth;\r\n      \t#pragma unroll_loop_start\r\n      \tfor( int i = 0; i < 17; i ++ ) {\r\n      \t\tdepth = unpackRGBAToDepth( texture2D( shadowMap, uv + poissonDisk[ i ] * filterRadius ) );\r\n      \t\tif( zReceiver <= depth ) sum += 1.0;\r\n      \t}\r\n      \t#pragma unroll_loop_end\r\n      \t#pragma unroll_loop_start\r\n      \tfor( int i = 0; i < 17; i ++ ) {\r\n      \t\tdepth = unpackRGBAToDepth( texture2D( shadowMap, uv + -poissonDisk[ i ].yx * filterRadius ) );\r\n      \t\tif( zReceiver <= depth ) sum += 1.0;\r\n      \t}\r\n      \t#pragma unroll_loop_end\r\n      \treturn sum / ( 2.0 * float( 17 ) );\r\n      }\r\n\r\n      float PCSS ( sampler2D shadowMap, vec4 coords ) {\r\n      \tvec2 uv = coords.xy;\r\n      \tfloat zReceiver = coords.z; // Assumed to be eye-space z in this code\r\n\r\n      \tinitPoissonSamples( uv );\r\n      \t// STEP 1: blocker search\r\n      \tfloat avgBlockerDepth = findBlocker( shadowMap, uv, zReceiver );\r\n\r\n      \t//There are no occluders so early out (this saves filtering)\r\n      \tif( avgBlockerDepth == -1.0 ) return 1.0;\r\n\r\n      \t// STEP 2: penumbra size\r\n      \tfloat penumbraRatio = penumbraSize( zReceiver, avgBlockerDepth );\r\n      \tfloat filterRadius = penumbraRatio * LIGHT_SIZE_UV * NEAR_PLANE / zReceiver;\r\n\r\n      \t// STEP 3: filtering\r\n      \t//return avgBlockerDepth;\r\n      \treturn PCF_Filter( shadowMap, uv, zReceiver, filterRadius );\r\n      }\r\n    </script>\r\n\r\n    <script type=\"x-shader/x-fragment\" id=\"PCSSGetShadow\">\r\n\r\n      return PCSS( shadowMap, shadowCoord );\r\n    </script>\r\n\r\n    <!-- Import maps polyfill -->\r\n    <!-- Remove this when import maps will be widely supported -->\r\n    <script async=\"\" src=\"https://unpkg.com/es-module-shims@1.3.6/dist/es-module-shims.js\"></script>\r\n\r\n    <script type=\"importmap\">\r\n      {\r\n        \"imports\": {\r\n          \"three\": \"../build/three.module.js\"\r\n        }\r\n      }\r\n    </script>\r\n\r\n    <script src=\"/0364f57fbff2fabbe941ed20c328ef1a.js\"></script>\r\n  </body>\r\n</html>\r\n"},"sourceMaps":null,"error":null,"hash":"274c42eeac925834e9133b66218ea960","cacheData":{"env":{}}}